{"version":3,"sources":["Components/Tl/TlYear/TlYear.js","Components/Tl/TlYear/TlPrizes/TlPrizes.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlCategory.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner.js","data/data.js","Components/Tl/Tl.js","Components/App.js","serviceWorker.js","index.js"],"names":["TlYear","react_default","a","createElement","className","data-id","this","props","id","data-year","year","content","Component","TlPrizesList","TlCategory","TlPriceWinner","data","rdmInt","min","max","Math","floor","random","generateData","years","i","push","prizeList","map","x","k","console","clear","y","j","name","bio","field","country","gender","round","age","Timeline","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","UNSAFE_componentWillMount","fetchData","log","state","timeline2","generatePriceWinners","parent","pricewinner","dot","inc","rectPosX","rectPosY","svg","h","prizeWinnersArr","TlCategory_TlPriceWinner_TlPriceWinner","key","concat","data-category","cx","cy","r","scaleOut","onMouseOver","e","dotMouseOver","onMouseOut","dotMouseOut","width","height","generateCategories","category","length","totalLength","CategoriesArr","TlPrizes_TlCategory_TlCategory","generatePrizes","line","multiplier","prizesArr","TlPrizes","generateTimeline","Tl_TlYear_TlYear","react","x1","y1","x2","y2","dotMouse","mouse","elt","target","dots","parentNode","querySelectorAll","setAttribute","Array","from","targettedId","dataset","mappedId","parseInt","getAttribute","othersDotsPosition","scaleIn","json","timeline","w","App","Tl","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8b63065.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TlYear extends Component {\n    render() {\n        return <g \n                className=\"year\" \n                data-id={this.props.id}\n                data-year={this.props.year}\n            >\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlYear;","import React, { Component } from 'react';\n\nclass TlPrizesList extends Component {\n    render() {\n        return <g className=\"prizesList\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlPrizesList;","import React, { Component } from 'react';\n\nclass TlCategory extends Component {\n    render() {\n        return <g className=\"category\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlCategory;","import { Component } from 'react';\n\nclass TlPriceWinner extends Component {\n    render() {\n        return this.props.content;\n    }\n}\n\nexport default TlPriceWinner;","const data = [];\nconst rdmInt = (min, max) => Math.floor(Math.random() * (max - min) + min)\n\nexport const generateData = () => {\n    const years = rdmInt(5, 10);\n    let year = 1934\n    // years generation\n    for (let i = 0; i < years; i++) data.push({\n        \"year\": year++,\n        \"prizeList\": []\n    });\n    // categories generation\n    data.map(x => {\n        for (let k = 0; k < rdmInt(0, 6); k++) x.prizeList.push([]);\n        return console.clear();\n    })\n    // price winners generation\n    data.map(x => x.prizeList.map((y, j) => {\n        for (let k = 0; k < rdmInt(0, 5); k++) y.push({\n            \"name\":\"jan\",\n            \"bio\":\"i'm a bio\",\n            \"data\": {\n                \"field\": j,\n                \"country\": \"FR\",\n                \"gender\": Math.round(Math.random()),\n                \"age\": rdmInt(22, 70)\n            }\n        });\n        return console.clear();\n    }));\n    return data\n}","import React, { Component, Fragment } from 'react';\n\nimport TlYear from './TlYear/TlYear';\nimport TlPrizes from './TlYear/TlPrizes/TlPrizes';\nimport TlCategory from './TlYear/TlPrizes/TlCategory/TlCategory';\nimport TlPriceWinner from './TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner'\nimport { generateData } from '../../data/data';\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            json: 'https://trash.a-dll.com/tl.json',\n            timeline: [],\n            timeline2: generateData(),\n            svg: {\n                w: 500,\n                h: 400\n            },\n            line: {\n                inc: 20,\n                multiplier: 20\n            },\n            dot: {\n                inc: 10,\n                othersDotsPosition: 10,\n                scaleIn: 10,\n                scaleOut: 5\n            }\n        }\n        // total length of the timeline\n        this.totalLength = 0;\n        // array which'll contain the prize list \n        this.prizesArr = []\n        // array which'll contain all categories\n        this.CategoriesArr = []\n        // array which'll contain all prize winners of a category\n        this.prizeWinnersArr = [];\n        // line position\n        this.line = {\n            x: 0,\n            y: 0\n        }\n        // dot position\n        this.dot = {\n            x: this.line.x,\n            y: 0\n        }\n    }\n    // fetch the data when the component mounting\n    UNSAFE_componentWillMount = () => this.fetchData();\n    fetchData = () => {\n        // fetch(this.state.json2, {mode: 'no-cors'})\n        // .then(fetched => fetched.json())\n        // .then(json => this.setState({timeline: json}))\n        // .catch(error => console.log(error))\n        console.log(this.state.timeline2)\n    }\n    // generation of price winners (dots)\n    generatePriceWinners = (parent, i, j) => parent.map((pricewinner, k) => {\n        // update the cdot y position by one dot incrementation\n        this.dot.y += this.state.dot.inc;\n        // push a <TlPriceWinner/> for each price winner\n        let rectPosX = this.dot.x - 4;\n        let rectPosY = (this.state.svg.h - this.dot.y) - 4;\n        return this.prizeWinnersArr.push(<TlPriceWinner \n            // unique key\n            key={`${i}${j}${k}`} \n            // the content is a SVG circle\n            content={pricewinner.data.gender ? <circle \n                className=\"dot\" \n                // unique id\n                data-id={`${i}${j}${k}`}\n                // category\n                data-category={pricewinner.data.field}\n                // position\n                cx={this.dot.x}\n                cy={this.state.svg.h - this.dot.y}\n                // rayon\n                r={this.state.dot.scaleOut}\n                // mouse events\n                onMouseOver={(e) => this.dotMouseOver(e)}\n                onMouseOut={(e) => this.dotMouseOut(e)}\n            /> : <rect \n                width=\"8\"\n                height=\"8\"\n                x={rectPosX}\n                y={rectPosY}\n\n                className=\"dot\" \n                // unique id\n                data-id={`${i}${j}${k}`}\n                // category\n                data-category={pricewinner.data.field}\n            />}\n        />);\n    })\n    // generation of categories (<g><TlPrizeWinner/></g>)\n    generateCategories = (parent, i) => parent.prizeList.map((category, j) => {\n        if (category.length !== 0) {\n            // increment the total length with each prize winners in a category length\n            this.totalLength += category.length;\n            // update the dot y position by one dot incrementation, again\n            this.dot.y += this.state.dot.inc;\n            // reset the prize winners array\n            this.prizeWinnersArr = [];\n            // call the above method\n            this.generatePriceWinners(category, i, j);\n        }\n        // push a <TlCategory/> for each category\n        return this.CategoriesArr.push(category.length !== 0 ? <TlCategory\n            // unique key & id\n            key={`${i}${j}`}\n            id={`${i}${j}`}\n            // the content is all the <TlPriceWinner/>\n            content={this.prizeWinnersArr}\n        /> : null)\n    })\n    // generation of all the prizes (<g><TlCategory/></g>)\n    generatePrizes = (parent, i) => {\n        // reset the total length\n        this.totalLength = 0;\n        // every line, the line y position is incremented by a line incrementation\n        this.line.x += this.state.line.inc;\n        // reset the dots position\n        this.dot.x = this.line.x;\n        this.dot.y = 0;\n        // reset the categories array\n        this.CategoriesArr = [];\n        // call the above method\n        this.generateCategories(parent, i)\n        // reset the line y position\n        this.line.y = this.state.svg.h - this.totalLength * this.state.line.multiplier;\n        // push a <TlPrize/> for each prize\n        this.prizesArr.push(<TlPrizes \n            // unique key & id\n            key={i} \n            id={i}\n            // the content is all the <TlCategory/>\n            content={this.CategoriesArr}\n        />)\n    }\n    // generation of all the timeline\n    generateTimeline = () => this.state.timeline2.map((year, i) => {\n        // reset the prizes array\n        this.prizesArr = [];\n        this.generatePrizes(year, i)\n        return (\n            // group all categories in a year\n            <TlYear \n                // unique key & id\n                key={i}\n                data-id={i}\n                year={year.year}\n                // the content is the line & all the <TlPrizes/>\n                content={<Fragment>\n                    <line \n                        // unique od\n                        data-id={i}\n                        // position\n                        x1={this.line.x} \n                        y1={this.line.y}\n                        x2={this.line.x} \n                        y2={this.state.svg.h} \n                    />\n                    {this.prizesArr}\n                </Fragment>}\n            />\n        )\n    })\n    // dot mouse events\n    dotMouse = (e, r, mouse) => {\n        // get the current element\n        const elt = e.target\n        // get all the dots\n        const dots = elt.parentNode.parentNode.parentNode.querySelectorAll('circle');\n        // set the scale\n        elt.setAttribute('r', r)\n        // for all the dots\n        Array.from(dots).map((x) => {\n            // get the target id\n            const targettedId = elt.dataset.id;\n            // get the mapped id\n            const mappedId = x.dataset.id;\n            // get the y position of the mapped dot\n            let cy = parseInt(x.getAttribute('cy'))\n            // 1 = over; 0 = out\n            if (mouse === 1) {\n                // if the targeted is bigger than the mapped id, increment by the dot pos\n                if ( targettedId > mappedId) cy += this.state.dot.othersDotsPosition;\n                // else if the targeted is bigger than the mapped id, decrement by the dot pos\n                else if (targettedId < mappedId) cy -= this.state.dot.othersDotsPosition;\n            }\n            // if the mouse is out, reverse logic\n            else if (mouse === 0) {\n                if ( targettedId < mappedId) cy += this.state.dot.othersDotsPosition;\n                else if (targettedId > mappedId) cy -= this.state.dot.othersDotsPosition;\n            }\n            // set new y dot position\n            return x.setAttribute('cy', cy)\n        })\n    }\n    // when the mouse is on a dot\n    dotMouseOver = (e) => this.dotMouse(e, this.state.dot.scaleIn, 1);\n    // when the mouse is over of a dot\n    dotMouseOut = (e) => this.dotMouse(e, this.state.dot.scaleOut, 0);\n    render() {\n        // render a svg with all child Components\n        return <svg \n            id=\"Timeline\"\n            width={this.state.svg.w}\n            height={this.state.svg.h}\n        >\n            {this.generateTimeline()}\n        </svg>;\n    }\n}\n\nexport default Timeline;","import React, { Component } from 'react';\n\nimport Tl from './Tl/Tl';\n\nclass App extends Component {\n  render() {\n    return <div className=\"App\">\n        <Tl/>\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\nimport './scss/master.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}