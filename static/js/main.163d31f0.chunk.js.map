{"version":3,"sources":["Components/Tl/TlYear/TlYear.js","Components/Tl/TlYear/TlPrizes/TlPrizes.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlCategory.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner.js","Components/Tl/Tl.js","Components/App.js","serviceWorker.js","index.js"],"names":["TlYear","react_default","a","createElement","className","data-id","this","props","id","content","Component","TlPrizesList","TlCategory","TlPriceWinner","Timeline","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","UNSAFE_componentWillMount","fetchData","fetch","state","json","then","fetched","setState","timeline","catch","error","console","log","generatePriceWinners","parent","i","j","map","pricewinner","k","dot","y","inc","prizeWinnersArr","push","TlCategory_TlPriceWinner_TlPriceWinner","key","concat","data-category","category","cx","x","cy","svg","h","r","scaleOut","onMouseOver","e","dotMouseOver","onMouseOut","dotMouseOut","generateCategories","prizesList","totalLength","length","CategoriesArr","TlPrizes_TlCategory_TlCategory","generatePrizes","line","multiplier","prizesArr","TlPrizes","generateTimeline","year","Tl_TlYear_TlYear","react","x1","y1","x2","y2","dotMouse","mouse","elt","target","dots","parentNode","querySelectorAll","setAttribute","Array","from","targettedId","dataset","mappedId","parseInt","getAttribute","othersDotsPosition","scaleIn","w","width","height","App","Tl","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163d31f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TlYear extends Component {\n    render() {\n        return <g className=\"year\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlYear;","import React, { Component } from 'react';\n\nclass TlPrizesList extends Component {\n    render() {\n        return <g className=\"prizesList\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlPrizesList;","import React, { Component } from 'react';\n\nclass TlCategory extends Component {\n    render() {\n        return <g className=\"category\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlCategory;","import { Component } from 'react';\n\nclass TlPriceWinner extends Component {\n    render() {\n        return this.props.content;\n    }\n}\n\nexport default TlPriceWinner;","import React, { Component, Fragment } from 'react';\n\nimport TlYear from './TlYear/TlYear';\nimport TlPrizes from './TlYear/TlPrizes/TlPrizes';\nimport TlCategory from './TlYear/TlPrizes/TlCategory/TlCategory';\nimport TlPriceWinner from './TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner'\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            json: 'https://gist.githubusercontent.com/blyndusk/d789375e1a6309f82745bcfa3477f64f/raw/c142eb72d344edbb1a9994a8a14e49c823784cfc/timeline.json',\n            timeline: [],\n            svg: {\n                w: 500,\n                h: 200\n            },\n            line: {\n                inc: 20,\n                multiplier: 20\n            },\n            dot: {\n                inc: 10,\n                othersDotsPosition: 10,\n                scaleIn: 10,\n                scaleOut: 5\n            }\n        }\n        // total length of the timeline\n        this.totalLength = 0;\n        // array which'll contain the prize list \n        this.prizesArr = []\n        // array which'll contain all categories\n        this.CategoriesArr = []\n        // array which'll contain all prize winners of a category\n        this.prizeWinnersArr = [];\n        // line position\n        this.line = {\n            x: 0,\n            y: 0\n        }\n        // dot position\n        this.dot = {\n            x: this.line.x,\n            y: 0\n        }\n    }\n    // fetch the data when the component mounting\n    UNSAFE_componentWillMount = () => this.fetchData();\n    fetchData = () => {\n        fetch(this.state.json)\n        .then(fetched => fetched.json())\n        .then(json => this.setState({timeline: json}))\n        .catch(error => console.log(error))\n    }\n    // generation of price winners (dots)\n    generatePriceWinners = (parent, i, j) => parent.map((pricewinner, k) => {\n        // update the cdot y position by one dot incrementation\n        this.dot.y += this.state.dot.inc;\n        // push a <TlPriceWinner/> for each price winner\n        return this.prizeWinnersArr.push(<TlPriceWinner \n            // unique key\n            key={`${i}${j}${k}`} \n            // the content is a SVG circle\n            content={<circle \n                className=\"dot\" \n                // unique id\n                data-id={`${i}${j}${k}`}\n                // category\n                data-category={pricewinner.category}\n                // position\n                cx={this.dot.x}\n                cy={this.state.svg.h - this.dot.y}\n                // rayon\n                r={this.state.dot.scaleOut}\n                // mouse events\n                onMouseOver={(e) => this.dotMouseOver(e)}\n                onMouseOut={(e) => this.dotMouseOut(e)}\n            />}\n        />);\n    })\n    // generation of categories (<g><TlPrizeWinner/></g>)\n    generateCategories = (parent, i) => parent.prizesList.map((category, j) => {\n        // increment the total length with each prize winners in a category length\n        this.totalLength += category.length;\n        // update the dot y position by one dot incrementation, again\n        this.dot.y += this.state.dot.inc;\n        // reset the prize winners array\n        this.prizeWinnersArr = [];\n        // call the above method\n        this.generatePriceWinners(category, i, j);\n        // push a <TlCategory/> for each category\n        return this.CategoriesArr.push(<TlCategory\n            // unique key & id\n            key={`${i}${j}`}\n            id={`${i}${j}`}\n            // the content is all the <TlPriceWinner/>\n            content={this.prizeWinnersArr}\n        />)\n    })\n    // generation of all the prizes (<g><TlCategory/></g>)\n    generatePrizes = (parent, i) => {\n        // reset the total length\n        this.totalLength = 0;\n        // every line, the line y position is incremented by a line incrementation\n        this.line.x += this.state.line.inc;\n        // reset the dots position\n        this.dot.x = this.line.x;\n        this.dot.y = 0;\n        // reset the categories array\n        this.CategoriesArr = [];\n        // call the above method\n        this.generateCategories(parent, i)\n        // reset the line y position\n        this.line.y = this.state.svg.h - this.totalLength * this.state.line.multiplier;\n        // push a <TlPrize/> for each prize\n        this.prizesArr.push(<TlPrizes \n            // unique key & id\n            key={i} \n            id={i}\n            // the content is all the <TlCategory/>\n            content={this.CategoriesArr}\n        />)\n    }\n    // generation of all the timeline\n    generateTimeline = () => this.state.timeline.map((year, i) => {\n        // reset the prizes array\n        this.prizesArr = [];\n        this.generatePrizes(year, i)\n        return (\n            // group all categories in a year\n            <TlYear \n                // unique key & id\n                key={i}\n                data-id={i}\n                // the content is the line & all the <TlPrizes/>\n                content={<Fragment>\n                    <line \n                        // unique od\n                        data-id={i}\n                        // position\n                        x1={this.line.x} \n                        y1={this.line.y}\n                        x2={this.line.x} \n                        y2={this.state.svg.h} \n                    />\n                    {this.prizesArr}\n                </Fragment>}\n            />\n        )\n    })\n    // dot mouse events\n    dotMouse = (e, r, mouse) => {\n        // get the current element\n        const elt = e.target\n        // get all the dots\n        const dots = elt.parentNode.parentNode.parentNode.querySelectorAll('circle');\n        // set the scale\n        elt.setAttribute('r', r)\n        // for all the dots\n        Array.from(dots).map((x) => {\n            // get the target id\n            const targettedId = elt.dataset.id;\n            // get the mapped id\n            const mappedId = x.dataset.id;\n            // get the y position of the mapped dot\n            let cy = parseInt(x.getAttribute('cy'))\n            // 1 = over; 0 = out\n            if (mouse === 1) {\n                // if the targeted is bigger than the mapped id, increment by the dot pos\n                if ( targettedId > mappedId) cy += this.state.dot.othersDotsPosition;\n                // else if the targeted is bigger than the mapped id, decrement by the dot pos\n                else if (targettedId < mappedId) cy -= this.state.dot.othersDotsPosition;\n            }\n            // if the mouse is out, reverse logic\n            else if (mouse === 0) {\n                if ( targettedId < mappedId) cy += this.state.dot.othersDotsPosition;\n                else if (targettedId > mappedId) cy -= this.state.dot.othersDotsPosition;\n            }\n            // set new y dot position\n            return x.setAttribute('cy', cy)\n        })\n    }\n    // when the mouse is on a dot\n    dotMouseOver = (e) => this.dotMouse(e, this.state.dot.scaleIn, 1);\n    // when the mouse is over of a dot\n    dotMouseOut = (e) => this.dotMouse(e, this.state.dot.scaleOut, 0);\n    render() {\n        // render a svg with all child Components\n        return <svg \n            id=\"Timeline\"\n            width={this.state.svg.w}\n            height={this.state.svg.h}\n        >\n            {this.generateTimeline()}\n        </svg>;\n    }\n}\n\nexport default Timeline;","import React, { Component } from 'react';\n\nimport Tl from './Tl/Tl';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Tl/>\n        <Tl/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\nimport './scss/master.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}