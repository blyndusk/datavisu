{"version":3,"sources":["Components/Tl/TlYear/TlYear.js","Components/Tl/TlYear/TlPrizes/TlPrizes.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlCategory.js","Components/Tl/TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner.js","Components/Tl/Tl.js","Components/App.js","serviceWorker.js","index.js"],"names":["TlYear","react_default","a","createElement","className","data-id","this","props","id","content","Component","TlPrizesList","TlCategory","TlDot","Timeline","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchData","fetch","state","json","then","fetched","setState","timeline","catch","error","console","log","generate","map","year","i","yearPosY","inc","totalPeopleLength","SVGcategoryGroup","SVGPeopleGroup","circlePos","x","y","prizesList","category","j","length","circle","SVGPeopleSubGroup","pricewinner","k","push","TlPriceWinner","key","concat","data-label","cx","r","cy","svg","h","onMouseOver","e","circleMouseOver","onMouseOut","circleMouseOut","TlPrizes_TlCategory_TlCategory","TlPrizes","Tl_TlYear_TlYear","react","x1","y1","line","multiplier","x2","y2","circleMouse","mouse","elt","target","circles","parentNode","querySelectorAll","setAttribute","Array","from","targetId","dataset","currentId","parseInt","getAttribute","hover","scale1","scale0","w","width","height","App","Tl","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb814a67.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TlYear extends Component {\n    render() {\n        return <g className=\"year\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlYear;","import React, { Component } from 'react';\n\nclass TlPrizesList extends Component {\n    render() {\n        return <g className=\"prizesList\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlPrizesList;","import React, { Component } from 'react';\n\nclass TlCategory extends Component {\n    render() {\n        return <g className=\"category\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlCategory;","import { Component } from 'react';\n\nclass TlDot extends Component {\n    render() {\n        return this.props.content;\n    }\n}\n\nexport default TlDot;","import React, { Component, Fragment } from 'react';\n\nimport TlYear from './TlYear/TlYear';\nimport TlPrizes from './TlYear/TlPrizes/TlPrizes';\nimport TlCategory from './TlYear/TlPrizes/TlCategory/TlCategory';\nimport TlPriceWinner from './TlYear/TlPrizes/TlCategory/TlPriceWinner/TlPriceWinner'\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            json: 'https://gist.githubusercontent.com/blyndusk/d789375e1a6309f82745bcfa3477f64f/raw/e1b9fdd086530e370775d95351019e4c1c6a2db8/timeline.json',\n            timeline: [],\n            svg: {\n                w: 500,\n                h: 200\n            },\n            year: {\n                inc: 20\n            },\n            line: {\n                multiplier: 20\n            },\n            circle: {\n                inc: 10,\n                hover: 10,\n                scale0: 5,\n                scale1: 10\n            }\n        }\n        // total length of the timelinex\n        this.yearPosY = 0;\n    }\n    componentDidMount = () => this.fetchData();\n    fetchData = () => {\n        fetch(this.state.json)\n        .then(fetched => fetched.json())\n        .then(json => this.setState({timeline: json}))\n        .catch(error => console.log(error))\n    }\n    generate = () => this.state.timeline.map((year, i) => {\n            // every year, yearPosY is incremented by 20\n            this.yearPosY += this.state.year.inc;\n            // total length of poeple in a specific year\n            let totalPeopleLength = 0;\n            // rendered array, which'll contain people in a category\n            const SVGcategoryGroup = [];\n            // rendered array, which'll contain a person for a nobel prize\n            const SVGPeopleGroup = [];\n            // SVG circles position\n            let circlePos= {\n                x: this.yearPosY,\n                y: 0\n            };\n            // for all categories in a year\n            year.prizesList.map((category, j) => {\n                // increment the total length with each length\n                totalPeopleLength += category.length;\n                // update the circle y postion by one unit\n                circlePos.y += this.state.circle.inc;\n                // init a subgroup array to staock all people\n                const SVGPeopleSubGroup = [];\n                // for every people in a category\n                category.map((pricewinner, k) => {\n                    console.log(pricewinner)\n                    // update the circle y postion by one unit\n                    circlePos.y += this.state.circle.inc;\n                    // push a circle for each person\n                    return SVGPeopleSubGroup.push(<TlPriceWinner \n                        key={`${i}${j}${k}`} \n                        content={\n                        <circle \n                            className=\"dot\" \n                            data-id={`${i}${j}${k}`}\n                            data-label={pricewinner.category}\n                            cx={circlePos.x}\n                            r=\"5\"\n                            cy={this.state.svg.h - circlePos.y}\n                            onMouseOver={(e) => this.circleMouseOver(e)}\n                            onMouseOut={(e) => this.circleMouseOut(e)}\n                        />\n                    }/>);\n                })\n                // group all person in people\n                return SVGPeopleGroup.push(<TlCategory\n                    key={`${i}${j}`}\n                    id={`${i}${j}`}\n                    content={SVGPeopleSubGroup}\n                />)\n            })\n            // group all people in a category\n            SVGcategoryGroup.push(<TlPrizes \n                key={i} \n                id={i}\n                content={SVGPeopleGroup}\n            />)\n            return (\n                // group all categories in a year\n                <TlYear \n                    key={i}\n                    data-id={i}\n                    content={\n                        <Fragment>\n                            <line \n                                data-id={i}\n                                x1={this.yearPosY} \n                                y1={this.state.svg.h - totalPeopleLength * this.state.line.multiplier}\n                                x2={this.yearPosY} \n                                y2={this.state.svg.h} \n                            />\n                            {SVGcategoryGroup}\n                        </Fragment>\n                    }\n                />\n            )\n        })\n    circleMouse = (e, r, mouse) => {\n        const elt = e.target\n        const circles = elt.parentNode.parentNode.parentNode.querySelectorAll('circle');\n        elt.setAttribute('r', r)\n        Array.from(circles).map((x) => {\n            const targetId = elt.dataset.id;\n            const currentId = x.dataset.id;\n            let cy = parseInt(x.getAttribute('cy'))\n            if (mouse === 1) {\n                if ( targetId > currentId) cy += this.state.circle.hover;\n                else if (targetId < currentId) cy -= this.state.circle.hover;\n            }\n            else if (mouse === 0) {\n                if ( targetId < currentId) cy += this.state.circle.hover;\n                else if (targetId > currentId) cy -= this.state.circle.hover;\n            }\n            return x.setAttribute('cy', cy)\n        })\n    }\n    circleMouseOver = (e) => this.circleMouse(e, this.state.circle.scale1, 1);\n    circleMouseOut = (e) => this.circleMouse(e, this.state.circle.scale0, 0);\n    render() {\n        return <svg \n            id=\"Timeline\"\n            width={this.state.svg.w}\n            height={this.state.svg.h}\n        >\n            {this.generate()}\n        </svg>;\n    }\n}\n\n\nexport default Timeline;","import React, { Component } from 'react';\n\nimport Tl from './Tl/Tl';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Tl/>\n        <Tl/>\n        <Tl/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\nimport './scss/master.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}