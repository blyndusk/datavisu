{"version":3,"sources":["Components/Timeline/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["Timeline","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchData","fetch","then","fetched","json","setState","timeline","getPrizesLength","state","map","x","i","yearPosY","totalPeopleLength","SVGcategoryGroup","SVGPeopleGroup","circlePos","y","j","categories","length","category","SVGPeopleSubGroup","k","person","name","push","react_default","a","createElement","key","concat","data-id","data-label","r","onMouseOver","e","circles","target","parentNode","querySelectorAll","setAttribute","circle","targetId","dataset","id","currentId","cy","parseInt","getAttribute","onMouseOut","cx","className","x1","y1","x2","y2","onMouseEnter","mouseup","year","console","log","height","width","Component","App","Components_Timeline_Timeline","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1a034fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeline: []\n        }\n        // total length of the timelinex\n        this.yearPosY = 0;\n    }\n\n    componentDidMount = () => {\n        this.fetchData()\n    }\n    fetchData = () => {\n        fetch('https://gist.githubusercontent.com/blyndusk/d789375e1a6309f82745bcfa3477f64f/raw/2bfea3519938d430b8f922b064c2b54567ea87db/timeline.json')\n        .then((fetched) => {\n            return fetched.json();\n        })\n        .then((json) => {\n            this.setState({timeline: json})\n        }); \n    }\n    getPrizesLength = () => this.state.timeline.map((x, i) => {\n            // every year, yearPosY is incremented by 20\n            this.yearPosY += 20;\n            // total length of poeple in a specific year\n            let totalPeopleLength = 0;\n            // rendered array, which'll contain people in a category\n            const SVGcategoryGroup = [];\n            // rendered array, which'll contain a person for a nobel prize\n            const SVGPeopleGroup = [];\n            // SVG circles position\n            let circlePos= {\n                x: this.yearPosY,\n                y: -10\n            };\n            // for all categories in a year\n            for (let j = 0; j < x.categories.length; j++) {\n                // a category\n                const category = x.categories[j];\n                // increment the total length with each length\n                totalPeopleLength += category.length;\n                // update the circle y postion by one unit\n                circlePos.y += 10;\n                // init a subgroup array to staock all people\n                const SVGPeopleSubGroup = [];\n                // for every people in a category\n                for (let k = 0; k < category.length; k++) {\n                    // a person\n                    const person = category[k].name;\n                    // update the circle y postion by one unit\n                    circlePos.y += 10;\n                    // push a circle for each person\n                    SVGPeopleSubGroup.push((<circle \n                        key={`${i}${j}${k}`}\n                        data-id={`${i}${j}${k}`}\n                        data-label={j}\n                        r=\"5\"\n                        onMouseOver={(e) => {\n                            const year = e.target.parentNode.parentNode.parentNode;\n                            const circles = year.querySelectorAll('circle');\n                            e.target.setAttribute('r', '10')\n                            for (let i = 0; i < circles.length; i++) {\n                                const circle = circles[i];\n                                const targetId = e.target.dataset.id;\n                                const currentId = circle.dataset.id;\n                                let cy = parseInt(circle.getAttribute('cy'))\n                                if ( targetId > currentId) cy += 10;\n                                else if (targetId < currentId) cy -= 10;\n                                circle.setAttribute('cy', `${cy}`)\n                                \n                            }\n                        }}\n                        onMouseOut={(e) => {\n                            const year = e.target.parentNode.parentNode.parentNode;\n                            const circles = year.querySelectorAll('circle');\n                            e.target.setAttribute('r', '5')\n                            for (let i = 0; i < circles.length; i++) {\n                                const circle = circles[i];\n                                const targetId = e.target.dataset.id;\n                                const currentId = circle.dataset.id;\n                                let cy = parseInt(circle.getAttribute('cy'))\n                                if ( targetId < currentId) cy += 10;\n                                else if (targetId > currentId) cy -= 10;\n                                circle.setAttribute('cy', `${cy}`)\n                                \n                            }\n                        }}\n                        cx={circlePos.x}\n                        cy={200 - circlePos.y}\n                    >{person}</circle>));\n                }\n                // group all person in people\n                SVGPeopleGroup.push(<g \n                    key={`${i}${j}`}\n                    data-id={`${i}${j}`}\n                    className=\"peoples\"\n                >{SVGPeopleSubGroup}</g>)\n            }\n            // group all people in a category\n            SVGcategoryGroup.push(<g key={i} className=\"category\">{SVGPeopleGroup}</g>)\n            return (\n                // group all categories in a year\n                <g \n                    key={i}\n                    data-id={i}\n                    className=\"year\">\n                    <line \n                        data-id={i}\n                        x1={this.yearPosY} \n                        y1={200 - totalPeopleLength * 20}\n                        x2={this.yearPosY} \n                        y2={200} \n                        onMouseEnter={() => this.mouseup(x.year)}\n                    />\n                    {SVGcategoryGroup}\n                </g>\n            )\n        })\n    mouseup = (year) => {\n        console.log('yeyey')\n        return <p>{year}</p>\n    } \n    render() {\n        return (\n        <div className=\"Timeline\">\n            <svg  height=\"200\" width=\"500\">\n                {this.getPrizesLength()}\n            </svg>\n        </div>\n        );\n    }\n}\n\nexport default Timeline;","import React, { Component } from 'react';\nimport './scss/master.scss';\n\nimport Timeline from './Components/Timeline/Timeline';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        app\n        <Timeline/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}