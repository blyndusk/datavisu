{"version":3,"sources":["Components/Timeline/TlYear/TlYear.js","Components/Timeline/TlYear/TlPrizesList/TlPrizesList.js","Components/Timeline/TlYear/TlPrizesList/TlCategory/TlCategory.js","Components/Timeline/TlYear/TlPrizesList/TlCategory/TlDot/TlDot.js","Components/Timeline/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["TlYear","react_default","a","createElement","className","data-id","this","props","id","content","Component","TlPrizesList","TlCategory","TlDot","Timeline","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchData","fetch","then","fetched","json","setState","timeline","getPrizesLength","state","map","x","i","yearPosY","totalPeopleLength","SVGcategoryGroup","SVGPeopleGroup","circlePos","y","j","categories","length","category","SVGPeopleSubGroup","k","push","TlCategory_TlDot_TlDot","key","concat","data-label","cx","r","cy","onMouseOver","e","circleMouseOver","onMouseOut","circleMouseOut","TlPrizesList_TlCategory_TlCategory","TlYear_TlPrizesList_TlPrizesList","Timeline_TlYear_TlYear","react","x1","y1","x2","y2","circleMouse","mouse","elt","target","circles","parentNode","querySelectorAll","setAttribute","Array","from","targetId","dataset","currentId","parseInt","getAttribute","height","width","App","Components_Timeline_Timeline","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7eac283d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TlYear extends Component {\n    render() {\n        return <g className=\"year\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlYear;","import React, { Component } from 'react';\n\nclass TlPrizesList extends Component {\n    render() {\n        return <g className=\"prizesList\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlPrizesList;","import React, { Component } from 'react';\n\nclass TlCategory extends Component {\n    render() {\n        return <g className=\"category\" data-id={this.props.id}>\n            {this.props.content}\n        </g>;\n    }\n}\n\nexport default TlCategory;","import { Component } from 'react';\n\nclass TlDot extends Component {\n    render() {\n        return this.props.content;\n    }\n}\n\nexport default TlDot;","import TlYear from './TlYear/TlYear';\nimport TlPrizesList from './TlYear/TlPrizesList/TlPrizesList';\nimport TlCategory from './TlYear/TlPrizesList/TlCategory/TlCategory';\nimport TlDot from './TlYear/TlPrizesList/TlCategory/TlDot/TlDot';\n\nimport React, { Component, Fragment } from 'react';\n\nclass Timeline extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeline: []\n        }\n        // total length of the timelinex\n        this.yearPosY = 0;\n    }\n    componentDidMount = () => this.fetchData();\n    fetchData = () => {\n        fetch('https://gist.githubusercontent.com/blyndusk/d789375e1a6309f82745bcfa3477f64f/raw/208d26ee8a552ecf2dea727f8ecefa41b47582f8/timeline.json')\n        .then(fetched => fetched.json())\n        .then(json => this.setState({timeline: json})); \n    }\n    getPrizesLength = () => this.state.timeline.map((x, i) => {\n            // every year, yearPosY is incremented by 20\n            this.yearPosY += 20;\n            // total length of poeple in a specific year\n            let totalPeopleLength = 0;\n            // rendered array, which'll contain people in a category\n            const SVGcategoryGroup = [];\n            // rendered array, which'll contain a person for a nobel prize\n            const SVGPeopleGroup = [];\n            // SVG circles position\n            let circlePos= {\n                x: this.yearPosY,\n                y: -10\n            };\n            // for all categories in a year\n            for (let j = 0; j < x.categories.length; j++) {\n                // a category\n                const category = x.categories[j];\n                // increment the total length with each length\n                totalPeopleLength += category.length;\n                // update the circle y postion by one unit\n                circlePos.y += 10;\n                // init a subgroup array to staock all people\n                const SVGPeopleSubGroup = [];\n                // for every people in a category\n                for (let k = 0; k < category.length; k++) {\n                    // update the circle y postion by one unit\n                    circlePos.y += 10;\n                    // push a circle for each person\n                    SVGPeopleSubGroup.push(<TlDot \n                        key={`${i}${j}${k}`} \n                        content={\n                        <circle \n                            className=\"dot\" \n                            data-id={`${i}${j}${k}`}\n                            data-label={j}\n                            cx={circlePos.x}\n                            r=\"5\"\n                            cy={200 - circlePos.y}\n                            onMouseOver={(e) => this.circleMouseOver(e)}\n                            onMouseOut={(e) => this.circleMouseOut(e)}\n                        />\n                    }/>);\n                }\n                // group all person in people\n                SVGPeopleGroup.push(<TlCategory\n                    key={`${i}${j}`}\n                    id={`${i}${j}`}\n                    content={SVGPeopleSubGroup}\n                />)\n            }\n            // group all people in a category\n            SVGcategoryGroup.push(<TlPrizesList \n                key={i} \n                id={i}\n                content={SVGPeopleGroup}\n            />)\n            return (\n                // group all categories in a year\n                <TlYear \n                    key={i}\n                    data-id={i}\n                    content={\n                        <Fragment>\n                            <line \n                                data-id={i}\n                                x1={this.yearPosY} \n                                y1={200 - totalPeopleLength * 20}\n                                x2={this.yearPosY} \n                                y2={200} \n                            />\n                            {SVGcategoryGroup}\n                        </Fragment>\n                    }\n                />\n            )\n        })\n    circleMouse = (e, r, mouse) => {\n        const elt = e.target\n        const circles = elt.parentNode.parentNode.parentNode.querySelectorAll('circle');\n        elt.setAttribute('r', r)\n        Array.from(circles).map((x) => {\n            const targetId = elt.dataset.id;\n            const currentId = x.dataset.id;\n            let cy = parseInt(x.getAttribute('cy'))\n            if (mouse === 1) {\n                if ( targetId > currentId) cy += 10;\n                else if (targetId < currentId) cy -= 10;\n            }\n            else if (mouse === 0) {\n                if ( targetId < currentId) cy += 10;\n                else if (targetId > currentId) cy -= 10;\n            }\n            return x.setAttribute('cy', cy)\n        })\n    }\n    circleMouseOver = (e) => this.circleMouse(e, 10, 1);\n    circleMouseOut = (e) => this.circleMouse(e, 5, 0);\n    render() {\n        return <svg \n            id=\"Timeline\"\n            height=\"200\"\n            width=\"500\"\n        >\n            {this.getPrizesLength()}\n        </svg>;\n    }\n}\n\n\nexport default Timeline;","import React, { Component } from 'react';\nimport './scss/master.scss';\n\nimport Timeline from './Components/Timeline/Timeline';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        app\n        <Timeline/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}